package Solution2;

import java.util.Arrays;

class Solution2 {

	public int[] solution(int[][] board, int k) {

		int length = board.length;
		int[] answer = new int[2];

		int[] directionX = { -1, 0, 1, 0 };
		int[] directionY = { 0, 1, 0, -1 };

		// x축으로 1씩 증가 -> 동쪽으로 방향 설정
		int d = 1;
		int count = 0;
		// 현재 위치 설정
		int x = 0;
		int y = 0;

		while (true) {
			count++;
			// 현재위치에다 앞으로 갈 방향을 더해준 값을 담아준다.
			// 그럼 nx=0, ny=1이 들어간다, 초기 위치가 0,0 이었고
			// 앞으로 갈 방향이 동쪽이라 인덱스 1을 찾아오기때문에 값이 저렇게 담긴다.
			int nx = x + directionX[d];
			int ny = y + directionY[d];

			// 여기서 우리가 생각할께 방향이 총 배열의 길이를 넘으면 안되고 x와y도 0보다 작으면 안된다.
			// 그리고 방향을 이동할때 1을 만나면 안된다.
			// 위의 세가지 조건을 맞이하면 로봇의 방향을
			if (nx < 0 || nx >= length || ny < 0 || ny >= length || board[nx][ny] == 1) {
				// 방향전환 -> 남쪽으로
				d = (d + 1) % 4;
				// 아래값이 담기면 안되므로 continue로 다시 위로 컴파일러 보낸다.
				continue;
			}
			//if문에 false면 가는방향이 길이를 넘지 않고 1을 만나지 않았다는 뜻
			//그럴때 
			x = nx;
			y = ny;

			if (count == k) {
				break;
			}
		}

		answer[0] = x;
		answer[1] = y;
		return answer;
	}

	public static void main(String[] args) {

		Solution2 T = new Solution2();
		int[][] arr1 = { { 0, 0, 0, 0, 0 }, { 0, 1, 1, 0, 0 }, { 0, 0, 0, 0, 0 }, { 1, 0, 1, 0, 1 },
				{ 0, 0, 0, 0, 0 } };

		System.out.println(Arrays.toString(T.solution(arr1, 10)));

		int[][] arr2 = { { 0, 0, 0, 1, 0, 1 }, { 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 1 }, { 1, 1, 0, 0, 1, 0 },
				{ 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0 } };
		System.out.println(Arrays.toString(T.solution(arr2, 20)));
		int[][] arr3 = { { 0, 0, 1, 0, 0 }, { 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 1, 0, 0, 0, 1 },
				{ 0, 0, 0, 0, 0 } };
		System.out.println(Arrays.toString(T.solution(arr3, 25)));

	}
}