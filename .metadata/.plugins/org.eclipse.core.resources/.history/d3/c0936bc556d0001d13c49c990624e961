package Solution3;

import java.util.Arrays;

public class Practice {
	public int solution(int[][] board) {
//		========================================================
		int finalLine = board.length;
		int[] direcX = { -1, 0, 1, 0 };
		int[] direcY = { 0, 1, 0, -1 };
		int[] human = new int[2];
		int[] dog = new int[2];
//		========================================================
		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board.length; j++) {
				if (board[i][j] == 2) {
					human[0] = i;
					human[1] = j;
				}
				if (board[i][j] == 3) {
					dog[0] = i;
					dog[1] = j;
				}
			}
		}
//		========================================================
		int directionForHuman = 0;
		int directionForDog = 0;
		int count = 0;
//		========================================================
		while (count < 10000) {
			
			count++;
			boolean flagHuman = true;
			boolean flagDog = true;
			
			int x1 = human[0] + direcX[directionForHuman];
			int y1 = human[1] + direcY[directionForHuman];

			int x2 = dog[0] + direcX[directionForDog];
			int y2 = dog[1] + direcY[directionForDog];

			if (x1 < 0 || x1 >= finalLine || y1 < 0 || y1 >= finalLine || board[x1][y1] == 1) {
				directionForHuman = (directionForHuman + 1) % 4;
				// 이때 flag를 두어 아래 true문안에 값이 안담기게 막는다. 그리고 다시 반복돌때는 flag가 true로 초기화된다.
				flagHuman = false;
			}
			if (x2 < 0 || x2 >= finalLine || y2 < 0 || y2 >= finalLine || board[x2][y2] == 1) {
				directionForDog = (directionForDog + 1) % 4;
				flagDog = false;
			}
			
			if (flagHuman == true) {
				human[0] = x1;
				human[1] = y1;
			}
			if (flagDog == true) {
				dog[0] = x2;
				dog[1] = y2;
			}
			if (human == dog)
				break;
		}
		if (count >= 10000)
			return 0;

		return count;
	}

	public static void main(String[] args) {
		Practice T = new Practice();
		int[][] arr1 = { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 2, 0, 0 },
				{ 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 3, 0, 0, 0, 1 },
				{ 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 } };
		System.out.println(T.solution(arr1));
		int[][] arr2 = { { 1, 0, 0, 0, 1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
				{ 0, 0, 1, 1, 0, 0, 0, 1, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
				{ 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }, { 0, 0, 1, 0, 0, 0, 0, 0, 2, 1 },
				{ 0, 0, 0, 1, 0, 1, 0, 0, 0, 1 }, { 0, 1, 0, 1, 0, 0, 0, 0, 0, 3 } };
		System.out.println(T.solution(arr2));
	}
}